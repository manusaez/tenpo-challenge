plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.tenpo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

var resilience4jVersion = "2.2.0"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.postgresql:r2dbc-postgresql'

	implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"

	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.8.6'

	implementation 'io.vavr:vavr:0.10.6'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}


test {
	useJUnitPlatform()
	jvmArgs("-XX:+EnableDynamicAgentLoading")

	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/tenpo/challenge/config/**",
					"com/tenpo/challenge/filter/**",
					"com/tenpo/challenge/exception/**",
					"com/tenpo/challenge/dto/**",
					"com/tenpo/challenge/service/mapper/**",
					"com/tenpo/challenge/TenpoChallengeApplication.class"
			])
		}))
	}
}